define(["require", "exports", "../../common/packageConversion/enum/objectTypeEnum", "../../common/packageConversion/exportContainer", "../../common/persistence/settings", "../../common/packageConversion/enum/dataTypeEnum", "../../common/packageConversion/enum/additionalMetaKeys", "../../common/packageConversion/mceConversionError", "./settingIds", "../../common/packageConversion/package", "../../common/packageConversion/meta"], function (require, exports, objectTypeEnum_1, exportContainer_1, settings_1, dataTypeEnum_1, additionalMetaKeys_1, mceConversionError_1, settingIds_1, package_1, meta_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var DataIds;
    (function (DataIds) {
        DataIds["SeriesId"] = "id";
        DataIds["SeriesName"] = "name";
        DataIds["SeriesColor"] = "color";
        DataIds["SeriesSignalData"] = "signalData";
        DataIds["SeriesCalculationData"] = "calculationData";
    })(DataIds || (DataIds = {}));
    var BaseSeriesPackageAdapter = /** @class */ (function () {
        function BaseSeriesPackageAdapter() {
            //newest version of package format
            this.currentPackageVersion = 1;
            this.settingsType = "BaseSeries";
            this.objectType = objectTypeEnum_1.ObjectType.BASESERIES;
        }
        BaseSeriesPackageAdapter.prototype.packageToSetting = function (packageData, container) {
            var _a, _b, _c;
            var setting = new settings_1.Settings(this.settingsType);
            if (((_a = packageData === null || packageData === void 0 ? void 0 : packageData.meta) === null || _a === void 0 ? void 0 : _a.dataType) == dataTypeEnum_1.DataType.OBJECT && ((_b = packageData === null || packageData === void 0 ? void 0 : packageData.meta) === null || _b === void 0 ? void 0 : _b[additionalMetaKeys_1.AdditionalMetaKeys.OBJECTTYPE]) == this.objectType) {
                switch ((_c = packageData === null || packageData === void 0 ? void 0 : packageData.meta) === null || _c === void 0 ? void 0 : _c[additionalMetaKeys_1.AdditionalMetaKeys.VERSION]) {
                    case 1:
                        setting = this.packageV1ToSetting(packageData, container);
                        break;
                    default:
                        throw mceConversionError_1.MceConversionError.createErrorByType(mceConversionError_1.MceConversionErrorType.UNSUPPORTED_VERSION, this.objectType);
                }
            }
            else {
                throw mceConversionError_1.MceConversionError.createErrorByType(mceConversionError_1.MceConversionErrorType.UNSUPPORTED_TYPE, this.objectType);
            }
            return setting;
        };
        BaseSeriesPackageAdapter.prototype.packageV1ToSetting = function (packageData, container) {
            var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x, _y, _z;
            var setting = new settings_1.Settings(this.settingsType);
            if (((_c = (_b = (_a = packageData === null || packageData === void 0 ? void 0 : packageData.data) === null || _a === void 0 ? void 0 : _a[DataIds.SeriesId]) === null || _b === void 0 ? void 0 : _b.meta) === null || _c === void 0 ? void 0 : _c.dataType) == dataTypeEnum_1.DataType.STRING) {
                setting.setValue(settingIds_1.SettingIds.SeriesId, (_e = (_d = packageData === null || packageData === void 0 ? void 0 : packageData.data) === null || _d === void 0 ? void 0 : _d[DataIds.SeriesId]) === null || _e === void 0 ? void 0 : _e.data);
            }
            else {
                throw mceConversionError_1.MceConversionError.createErrorByType(mceConversionError_1.MceConversionErrorType.MISSING_DATA, DataIds.SeriesId);
            }
            if (((_h = (_g = (_f = packageData === null || packageData === void 0 ? void 0 : packageData.data) === null || _f === void 0 ? void 0 : _f[DataIds.SeriesName]) === null || _g === void 0 ? void 0 : _g.meta) === null || _h === void 0 ? void 0 : _h.dataType) == dataTypeEnum_1.DataType.STRING) {
                setting.setValue(settingIds_1.SettingIds.SeriesName, (_k = (_j = packageData === null || packageData === void 0 ? void 0 : packageData.data) === null || _j === void 0 ? void 0 : _j[DataIds.SeriesName]) === null || _k === void 0 ? void 0 : _k.data);
            }
            else {
                throw mceConversionError_1.MceConversionError.createErrorByType(mceConversionError_1.MceConversionErrorType.MISSING_DATA, DataIds.SeriesName);
            }
            if (((_o = (_m = (_l = packageData === null || packageData === void 0 ? void 0 : packageData.data) === null || _l === void 0 ? void 0 : _l[DataIds.SeriesColor]) === null || _m === void 0 ? void 0 : _m.meta) === null || _o === void 0 ? void 0 : _o.dataType) == dataTypeEnum_1.DataType.STRING) {
                setting.setValue(settingIds_1.SettingIds.SeriesColor, (_q = (_p = packageData === null || packageData === void 0 ? void 0 : packageData.data) === null || _p === void 0 ? void 0 : _p[DataIds.SeriesColor]) === null || _q === void 0 ? void 0 : _q.data);
            }
            else {
                throw mceConversionError_1.MceConversionError.createErrorByType(mceConversionError_1.MceConversionErrorType.MISSING_DATA, DataIds.SeriesColor);
            }
            if (((_s = (_r = packageData === null || packageData === void 0 ? void 0 : packageData.data) === null || _r === void 0 ? void 0 : _r[DataIds.SeriesSignalData]) === null || _s === void 0 ? void 0 : _s.meta.dataType) == dataTypeEnum_1.DataType.LINK) {
                var id = (_u = (_t = packageData === null || packageData === void 0 ? void 0 : packageData.data) === null || _t === void 0 ? void 0 : _t[DataIds.SeriesSignalData]) === null || _u === void 0 ? void 0 : _u.data;
                var signalDataSetting = container.getSettingsByID(id);
                if (signalDataSetting !== null) {
                    setting.setValue(settingIds_1.SettingIds.SeriesSignalData, signalDataSetting);
                }
            }
            else if (((_x = (_w = (_v = packageData === null || packageData === void 0 ? void 0 : packageData.data) === null || _v === void 0 ? void 0 : _v[DataIds.SeriesCalculationData]) === null || _w === void 0 ? void 0 : _w.meta) === null || _x === void 0 ? void 0 : _x.dataType) == dataTypeEnum_1.DataType.LINK) {
                var id = (_z = (_y = packageData === null || packageData === void 0 ? void 0 : packageData.data) === null || _y === void 0 ? void 0 : _y[DataIds.SeriesCalculationData]) === null || _z === void 0 ? void 0 : _z.data;
                var calculationDataInfoSetting = container.getSettingsByID(id);
                if (calculationDataInfoSetting !== undefined) {
                    setting.setValue(settingIds_1.SettingIds.SeriesCalculationData, calculationDataInfoSetting);
                }
            }
            else {
                throw mceConversionError_1.MceConversionError.createErrorByType(mceConversionError_1.MceConversionErrorType.MISSING_DATA, DataIds.SeriesSignalData + "/" + DataIds.SeriesCalculationData);
            }
            return setting;
        };
        BaseSeriesPackageAdapter.prototype.settingToPackage = function (settingsData) {
            var _a, _b;
            var settings = settings_1.Settings.create(settingsData);
            var seriesData = {};
            var packageStructure = {
                packages: new Array(),
                topLevelID: NaN
            };
            if (settings.type === this.settingsType) {
                var id = meta_1.Meta.createID();
                var additionalMetaInfo = [{ key: additionalMetaKeys_1.AdditionalMetaKeys.OBJECTTYPE, value: this.objectType }, { key: additionalMetaKeys_1.AdditionalMetaKeys.ID, value: id }, { key: additionalMetaKeys_1.AdditionalMetaKeys.VERSION, value: this.currentPackageVersion }];
                var seriesMeta = new meta_1.Meta(dataTypeEnum_1.DataType.OBJECT, additionalMetaInfo);
                var seriesIdData = settings.getValue(settingIds_1.SettingIds.SeriesId);
                if (seriesIdData !== undefined) {
                    seriesData[DataIds.SeriesId] = new package_1.Package(new meta_1.Meta(dataTypeEnum_1.DataType.STRING), seriesIdData);
                }
                else {
                    throw mceConversionError_1.MceConversionError.createErrorByType(mceConversionError_1.MceConversionErrorType.MISSING_DATA, settingIds_1.SettingIds.SeriesId);
                }
                var seriesNameData = settings.getValue(settingIds_1.SettingIds.SeriesName);
                if (seriesNameData !== undefined) {
                    seriesData[DataIds.SeriesName] = new package_1.Package(new meta_1.Meta(dataTypeEnum_1.DataType.STRING), seriesNameData);
                }
                else {
                    throw mceConversionError_1.MceConversionError.createErrorByType(mceConversionError_1.MceConversionErrorType.MISSING_DATA, settingIds_1.SettingIds.SeriesName);
                }
                var seriesColorData = settings.getValue(settingIds_1.SettingIds.SeriesColor);
                if (seriesColorData !== undefined) {
                    seriesData[DataIds.SeriesColor] = new package_1.Package(new meta_1.Meta(dataTypeEnum_1.DataType.STRING), seriesColorData);
                }
                else {
                    throw mceConversionError_1.MceConversionError.createErrorByType(mceConversionError_1.MceConversionErrorType.MISSING_DATA, settingIds_1.SettingIds.SeriesColor);
                }
                var seriesSignalDataData = settings.getValue(settingIds_1.SettingIds.SeriesSignalData);
                var seriesCalculationDataInfoData = settings.getValue(settingIds_1.SettingIds.SeriesCalculationData);
                if (seriesSignalDataData !== undefined) {
                    var signalDataPackageStructure = exportContainer_1.ExportContainer.createPackages(seriesSignalDataData);
                    if (signalDataPackageStructure.packages.length > 0 && !Number.isNaN(signalDataPackageStructure.topLevelID)) {
                        seriesData[DataIds.SeriesSignalData] = new package_1.Package(new meta_1.Meta(dataTypeEnum_1.DataType.LINK), signalDataPackageStructure.topLevelID);
                        (_a = packageStructure.packages).push.apply(_a, signalDataPackageStructure.packages);
                    }
                    else {
                        throw mceConversionError_1.MceConversionError.createErrorByType(mceConversionError_1.MceConversionErrorType.MISSING_DATA, settingIds_1.SettingIds.SeriesSignalData + "/" + seriesCalculationDataInfoData);
                    }
                }
                else if (seriesCalculationDataInfoData !== undefined) {
                    var calculationDataInfoPackageStructure = exportContainer_1.ExportContainer.createPackages(seriesCalculationDataInfoData);
                    if (calculationDataInfoPackageStructure.packages.length > 0 && !Number.isNaN(calculationDataInfoPackageStructure.topLevelID)) {
                        seriesData[DataIds.SeriesCalculationData] = new package_1.Package(new meta_1.Meta(dataTypeEnum_1.DataType.LINK), calculationDataInfoPackageStructure.topLevelID);
                        (_b = packageStructure.packages).push.apply(_b, calculationDataInfoPackageStructure.packages);
                    }
                    else {
                        throw mceConversionError_1.MceConversionError.createErrorByType(mceConversionError_1.MceConversionErrorType.MISSING_DATA, settingIds_1.SettingIds.SeriesSignalData + "/" + seriesCalculationDataInfoData);
                    }
                }
                else {
                    throw mceConversionError_1.MceConversionError.createErrorByType(mceConversionError_1.MceConversionErrorType.MISSING_DATA, settingIds_1.SettingIds.SeriesSignalData + "/" + seriesCalculationDataInfoData);
                }
                var seriesPackage = new package_1.Package(seriesMeta, seriesData);
                packageStructure.packages.push(seriesPackage);
                packageStructure.topLevelID = id;
            }
            else {
                throw mceConversionError_1.MceConversionError.createErrorByType(mceConversionError_1.MceConversionErrorType.UNSUPPORTED_VERSION, this.settingsType);
            }
            return packageStructure;
        };
        return BaseSeriesPackageAdapter;
    }());
    exports.BaseSeriesPackageAdapter = BaseSeriesPackageAdapter;
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmFzZVNlcmllc1BhY2thZ2VBZGFwdGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vc3JjL2FwcC9tb2RlbHMvY2hhcnRNYW5hZ2VyRGF0YU1vZGVsL2Jhc2VTZXJpZXNQYWNrYWdlQWRhcHRlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7SUFjQSxJQUFLLE9BTUo7SUFORCxXQUFLLE9BQU87UUFDUiwwQkFBZSxDQUFBO1FBQ2YsOEJBQW1CLENBQUE7UUFDbkIsZ0NBQXFCLENBQUE7UUFDckIsMENBQStCLENBQUE7UUFDL0Isb0RBQXlDLENBQUE7SUFDN0MsQ0FBQyxFQU5JLE9BQU8sS0FBUCxPQUFPLFFBTVg7SUFFRDtRQVFJO1lBTkEsa0NBQWtDO1lBQ2pCLDBCQUFxQixHQUFHLENBQUMsQ0FBQztZQU12QyxJQUFJLENBQUMsWUFBWSxHQUFHLFlBQVksQ0FBQztZQUNqQyxJQUFJLENBQUMsVUFBVSxHQUFHLDJCQUFVLENBQUMsVUFBVSxDQUFDO1FBQzVDLENBQUM7UUFDRCxtREFBZ0IsR0FBaEIsVUFBaUIsV0FBcUIsRUFBRSxTQUEwQjs7WUFFOUQsSUFBSSxPQUFPLEdBQWMsSUFBSSxtQkFBUSxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQztZQUV6RCxJQUFHLE9BQUEsV0FBVyxhQUFYLFdBQVcsdUJBQVgsV0FBVyxDQUFFLElBQUksMENBQUUsUUFBUSxLQUFJLHVCQUFRLENBQUMsTUFBTSxJQUFJLE9BQUEsV0FBVyxhQUFYLFdBQVcsdUJBQVgsV0FBVyxDQUFFLElBQUksMENBQUcsdUNBQWtCLENBQUMsVUFBVSxNQUFLLElBQUksQ0FBQyxVQUFVLEVBQUU7Z0JBRXhILGNBQU8sV0FBVyxhQUFYLFdBQVcsdUJBQVgsV0FBVyxDQUFFLElBQUksMENBQUcsdUNBQWtCLENBQUMsT0FBTyxHQUFFO29CQUNuRCxLQUFLLENBQUM7d0JBQ0YsT0FBTyxHQUFHLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxXQUFX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dUNBQWtCLENBQUMsaUJBQWlCLENBQUMsMkNBQXNCLENBQUMsbUJBQW1CLEVBQUUsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDO2FBQzdHO1lBRUQsT0FBTyxnQkFBZ0IsQ0FBQztRQUM1QixDQUFDO1FBQ0wsK0JBQUM7SUFBRCxDQUFDLEFBakpELElBaUpDO0lBRVEsNERBQXdCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSVBhY2thZ2VBZGFwdGVyLCBQYWNrYWdlQXJyYXlXaXRoVG9wTGV2ZWxJRCB9IGZyb20gXCIuLi8uLi9jb21tb24vcGFja2FnZUNvbnZlcnNpb24vaW50ZXJmYWNlL3BhY2thZ2VBZGFwdGVySW50ZXJmYWNlXCI7XHJcbmltcG9ydCB7IE9iamVjdFR5cGUgfSBmcm9tIFwiLi4vLi4vY29tbW9uL3BhY2thZ2VDb252ZXJzaW9uL2VudW0vb2JqZWN0VHlwZUVudW1cIjtcclxuaW1wb3J0IHsgSVBhY2thZ2UgfSBmcm9tIFwiLi4vLi4vY29tbW9uL3BhY2thZ2VDb252ZXJzaW9uL2ludGVyZmFjZS9wYWNrYWdlSW50ZXJmYWNlXCI7XHJcbmltcG9ydCB7IEV4cG9ydENvbnRhaW5lciB9IGZyb20gXCIuLi8uLi9jb21tb24vcGFja2FnZUNvbnZlcnNpb24vZXhwb3J0Q29udGFpbmVyXCI7XHJcbmltcG9ydCB7IElTZXR0aW5ncyB9IGZyb20gXCIuLi8uLi9jb21tb24vcGVyc2lzdGVuY2UvaW50ZXJmYWNlcy9zZXR0aW5nc0ludGVyZmFjZVwiO1xyXG5pbXBvcnQgeyBTZXR0aW5ncyB9IGZyb20gXCIuLi8uLi9jb21tb24vcGVyc2lzdGVuY2Uvc2V0dGluZ3NcIjtcclxuaW1wb3J0IHsgRGF0YVR5cGUgfSBmcm9tIFwiLi4vLi4vY29tbW9uL3BhY2thZ2VDb252ZXJzaW9uL2VudW0vZGF0YVR5cGVFbnVtXCI7XHJcbmltcG9ydCB7IEFkZGl0aW9uYWxNZXRhS2V5cyB9IGZyb20gXCIuLi8uLi9jb21tb24vcGFja2FnZUNvbnZlcnNpb24vZW51bS9hZGRpdGlvbmFsTWV0YUtleXNcIjtcclxuaW1wb3J0IHsgTWNlQ29udmVyc2lvbkVycm9yLCBNY2VDb252ZXJzaW9uRXJyb3JUeXBlIH0gZnJvbSBcIi4uLy4uL2NvbW1vbi9wYWNrYWdlQ29udmVyc2lvbi9tY2VDb252ZXJzaW9uRXJyb3JcIjtcclxuaW1wb3J0IHsgU2V0dGluZ0lkcyB9IGZyb20gXCIuL3NldHRpbmdJZHNcIjtcclxuaW1wb3J0IHsgUGFja2FnZSB9IGZyb20gXCIuLi8uLi9jb21tb24vcGFja2FnZUNvbnZlcnNpb24vcGFja2FnZVwiO1xyXG5pbXBvcnQgeyBNZXRhIH0gZnJvbSBcIi4uLy4uL2NvbW1vbi9wYWNrYWdlQ29udmVyc2lvbi9tZXRhXCI7XHJcblxyXG5cclxuZW51bSBEYXRhSWRzIHtcclxuICAgIFNlcmllc0lkID0gXCJpZFwiLFxyXG4gICAgU2VyaWVzTmFtZSA9IFwibmFtZVwiLFxyXG4gICAgU2VyaWVzQ29sb3IgPSBcImNvbG9yXCIsXHJcbiAgICBTZXJpZXNTaWduYWxEYXRhID0gXCJzaWduYWxEYXRhXCIsXHJcbiAgICBTZXJpZXNDYWxjdWxhdGlvbkRhdGEgPSBcImNhbGN1bGF0aW9uRGF0YVwiXHJcbn1cclxuXHJcbmNsYXNzIEJhc2VTZXJpZXNQYWNrYWdlQWRhcHRlciBpbXBsZW1lbnRzIElQYWNrYWdlQWRhcHRlciB7XHJcbiAgIFxyXG4gICAgLy9uZXdlc3QgdmVyc2lvbiBvZiBwYWNrYWdlIGZvcm1hdFxyXG4gICAgcHJpdmF0ZSByZWFkb25seSBjdXJyZW50UGFja2FnZVZlcnNpb24gPSAxO1xyXG5cclxuICAgIHByb3RlY3RlZCBzZXR0aW5nc1R5cGU6IHN0cmluZztcclxuICAgIHByb3RlY3RlZCBvYmplY3RUeXBlOiBPYmplY3RUeXBlO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgICAgIHRoaXMuc2V0dGluZ3NUeXBlID0gXCJCYXNlU2VyaWVzXCI7XHJcbiAgICAgICAgdGhpcy5vYmplY3RUeXBlID0gT2JqZWN0VHlwZS5CQVNFU0VSSUVTO1xyXG4gICAgfVxyXG4gICAgcGFja2FnZVRvU2V0dGluZyhwYWNrYWdlRGF0YTogSVBhY2thZ2UsIGNvbnRhaW5lcjogRXhwb3J0Q29udGFpbmVyKTogSVNldHRpbmdzIHtcclxuXHJcbiAgICAgICAgbGV0IHNldHRpbmc6IElTZXR0aW5ncyA9IG5ldyBTZXR0aW5ncyh0aGlzLnNldHRpbmdzVHlwZSk7XHJcblxyXG4gICAgICAgIGlmKHBhY2thZ2VEYXRhPy5tZXRhPy5kYXRhVHlwZSA9PSBEYXRhVHlwZS5PQkpFQ1QgJiYgcGFja2FnZURhdGE/Lm1ldGE/LltBZGRpdGlvbmFsTWV0YUtleXMuT0JKRUNUVFlQRV0gPT0gdGhpcy5vYmplY3RUeXBlKSB7XHJcbiAgICAgICAgICAgXHJcbiAgICAgICAgICAgIHN3aXRjaChwYWNrYWdlRGF0YT8ubWV0YT8uW0FkZGl0aW9uYWxNZXRhS2V5cy5WRVJTSU9OXSl7IFxyXG4gICAgICAgICAgICAgICAgY2FzZSAxOlxyXG4gICAgICAgICAgICAgICAgICAgIHNldHRpbmcgPSB0aGlzLnBhY2thZ2VWMVRvU2V0dGluZyhwYWNrYWdlRGF0YSwgY29udGFpbmVyKTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgTWNlQ29udmVyc2lvbkVycm9yLmNyZWF0ZUVycm9yQnlUeXBlKE1jZUNvbnZlcnNpb25FcnJvclR5cGUuVU5TVVBQT1JURURfVkVSU0lPTiwgdGhpcy5vYmplY3RUeXBlKVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgdGhyb3cgTWNlQ29udmVyc2lvbkVycm9yLmNyZWF0ZUVycm9yQnlUeXBlKE1jZUNvbnZlcnNpb25FcnJvclR5cGUuVU5TVVBQT1JURURfVFlQRSwgdGhpcy5vYmplY3RUeXBlKVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIHNldHRpbmc7XHJcbiAgICBcclxuICAgIH0gICAgXHJcblxyXG4gICAgcHJpdmF0ZSBwYWNrYWdlVjFUb1NldHRpbmcocGFja2FnZURhdGE6IElQYWNrYWdlLCBjb250YWluZXI6IEV4cG9ydENvbnRhaW5lcik6IElTZXR0aW5ncyB7XHJcbiAgICAgICAgbGV0IHNldHRpbmcgPSBuZXcgU2V0dGluZ3ModGhpcy5zZXR0aW5nc1R5cGUpO1xyXG5cclxuICAgICAgICBpZihwYWNrYWdlRGF0YT8uZGF0YT8uW0RhdGFJZHMuU2VyaWVzSWRdPy5tZXRhPy5kYXRhVHlwZSA9PSBEYXRhVHlwZS5TVFJJTkcpIHtcclxuICAgICAgICAgICAgc2V0dGluZy5zZXRWYWx1ZShTZXR0aW5nSWRzLlNlcmllc0lkLCBwYWNrYWdlRGF0YT8uZGF0YT8uW0RhdGFJZHMuU2VyaWVzSWRdPy5kYXRhKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB0aHJvdyBNY2VDb252ZXJzaW9uRXJyb3IuY3JlYXRlRXJyb3JCeVR5cGUoTWNlQ29udmVyc2lvbkVycm9yVHlwZS5NSVNTSU5HX0RBVEEsIERhdGFJZHMuU2VyaWVzSWQpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZihwYWNrYWdlRGF0YT8uZGF0YT8uW0RhdGFJZHMuU2VyaWVzTmFtZV0/Lm1ldGE/LmRhdGFUeXBlID09IERhdGFUeXBlLlNUUklORykge1xyXG4gICAgICAgICAgICBzZXR0aW5nLnNldFZhbHVlKFNldHRpbmdJZHMuU2VyaWVzTmFtZSwgcGFja2FnZURhdGE/LmRhdGE/LltEYXRhSWRzLlNlcmllc05hbWVdPy5kYXRhKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB0aHJvdyBNY2VDb252ZXJzaW9uRXJyb3IuY3JlYXRlRXJyb3JCeVR5cGUoTWNlQ29udmVyc2lvbkVycm9yVHlwZS5NSVNTSU5HX0RBVEEsIERhdGFJZHMuU2VyaWVzTmFtZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmKHBhY2thZ2VEYXRhPy5kYXRhPy5bRGF0YUlkcy5TZXJpZXNDb2xvcl0/Lm1ldGE/LmRhdGFUeXBlID09IERhdGFUeXBlLlNUUklORykge1xyXG4gICAgICAgICAgICBzZXR0aW5nLnNldFZhbHVlKFNldHRpbmdJZHMuU2VyaWVzQ29sb3IsIHBhY2thZ2VEYXRhPy5kYXRhPy5bRGF0YUlkcy5TZXJpZXNDb2xvcl0/LmRhdGEpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHRocm93IE1jZUNvbnZlcnNpb25FcnJvci5jcmVhdGVFcnJvckJ5VHlwZShNY2VDb252ZXJzaW9uRXJyb3JUeXBlLk1JU1NJTkdfREFUQSwgRGF0YUlkcy5TZXJpZXNDb2xvcilcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYocGFja2FnZURhdGE/LmRhdGE/LltEYXRhSWRzLlNlcmllc1NpZ25hbERhdGFdPy5tZXRhLmRhdGFUeXBlID09IERhdGFUeXBlLkxJTkspIHtcclxuICAgICAgICAgICAgbGV0IGlkID0gcGFja2FnZURhdGE/LmRhdGE/LltEYXRhSWRzLlNlcmllc1NpZ25hbERhdGFdPy5kYXRhO1xyXG4gICAgICAgICAgICBsZXQgc2lnbmFsRGF0YVNldHRpbmcgPSBjb250YWluZXIuZ2V0U2V0dGluZ3NCeUlEKGlkKTtcclxuICAgICAgICAgICAgaWYoc2lnbmFsRGF0YVNldHRpbmcgIT09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgIHNldHRpbmcuc2V0VmFsdWUoU2V0dGluZ0lkcy5TZXJpZXNTaWduYWxEYXRhLCBzaWduYWxEYXRhU2V0dGluZyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9IGVsc2UgaWYocGFja2FnZURhdGE/LmRhdGE/LltEYXRhSWRzLlNlcmllc0NhbGN1bGF0aW9uRGF0YV0/Lm1ldGE/LmRhdGFUeXBlID09IERhdGFUeXBlLkxJTkspIHtcclxuICAgICAgICAgICAgbGV0IGlkID0gcGFja2FnZURhdGE/LmRhdGE/LltEYXRhSWRzLlNlcmllc0NhbGN1bGF0aW9uRGF0YV0/LmRhdGE7XHJcbiAgICAgICAgICAgIGxldCBjYWxjdWxhdGlvbkRhdGFJbmZvU2V0dGluZyA9IGNvbnRhaW5lci5nZXRTZXR0aW5nc0J5SUQoaWQpO1xyXG4gICAgICAgICAgICBpZiggY2FsY3VsYXRpb25EYXRhSW5mb1NldHRpbmcgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgc2V0dGluZy5zZXRWYWx1ZShTZXR0aW5nSWRzLlNlcmllc0NhbGN1bGF0aW9uRGF0YSwgY2FsY3VsYXRpb25EYXRhSW5mb1NldHRpbmcpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgdGhyb3cgTWNlQ29udmVyc2lvbkVycm9yLmNyZWF0ZUVycm9yQnlUeXBlKE1jZUNvbnZlcnNpb25FcnJvclR5cGUuTUlTU0lOR19EQVRBLCBgJHtEYXRhSWRzLlNlcmllc1NpZ25hbERhdGF9LyR7RGF0YUlkcy5TZXJpZXNDYWxjdWxhdGlvbkRhdGF9YCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gc2V0dGluZztcclxuICAgIH1cclxuICAgIHNldHRpbmdUb1BhY2thZ2Uoc2V0dGluZ3NEYXRhOiBJU2V0dGluZ3MpOiBQYWNrYWdlQXJyYXlXaXRoVG9wTGV2ZWxJRCB7XHJcbiAgICAgICAgXHJcbiAgICAgICAgbGV0IHNldHRpbmdzID0gU2V0dGluZ3MuY3JlYXRlKHNldHRpbmdzRGF0YSk7XHJcblxyXG4gICAgICAgIGxldCBzZXJpZXNEYXRhOiB7IFtpbmRleDogc3RyaW5nXTogIElQYWNrYWdlIH0gID0ge307XHJcblxyXG4gICAgICAgIGxldCBwYWNrYWdlU3RydWN0dXJlOiBQYWNrYWdlQXJyYXlXaXRoVG9wTGV2ZWxJRCA9IHtcclxuICAgICAgICAgICAgIHBhY2thZ2VzOiBuZXcgQXJyYXk8SVBhY2thZ2U+KCksXHJcbiAgICAgICAgICAgICB0b3BMZXZlbElEOiBOYU5cclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICBpZihzZXR0aW5ncy50eXBlID09PSB0aGlzLnNldHRpbmdzVHlwZSkge1xyXG5cclxuICAgICAgICAgICAgbGV0IGlkID0gTWV0YS5jcmVhdGVJRCgpO1xyXG4gICAgICAgICAgICBsZXQgYWRkaXRpb25hbE1ldGFJbmZvID0gW3trZXk6IEFkZGl0aW9uYWxNZXRhS2V5cy5PQkpFQ1RUWVBFLCB2YWx1ZTogdGhpcy5vYmplY3RUeXBlfSwge2tleTogQWRkaXRpb25hbE1ldGFLZXlzLklELCB2YWx1ZTogaWR9LCB7a2V5OiBBZGRpdGlvbmFsTWV0YUtleXMuVkVSU0lPTiwgdmFsdWU6IHRoaXMuY3VycmVudFBhY2thZ2VWZXJzaW9ufV07XHJcbiAgICAgICAgICAgIGxldCBzZXJpZXNNZXRhID0gbmV3IE1ldGEoRGF0YVR5cGUuT0JKRUNULCBhZGRpdGlvbmFsTWV0YUluZm8pO1xyXG5cclxuICAgICAgICAgICAgbGV0IHNlcmllc0lkRGF0YSA9IHNldHRpbmdzLmdldFZhbHVlKFNldHRpbmdJZHMuU2VyaWVzSWQpO1xyXG4gICAgICAgICAgICBpZihzZXJpZXNJZERhdGEgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgc2VyaWVzRGF0YVtEYXRhSWRzLlNlcmllc0lkXSA9IG5ldyBQYWNrYWdlKG5ldyBNZXRhKERhdGFUeXBlLlNUUklORyksIHNlcmllc0lkRGF0YSk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB0aHJvdyBNY2VDb252ZXJzaW9uRXJyb3IuY3JlYXRlRXJyb3JCeVR5cGUoTWNlQ29udmVyc2lvbkVycm9yVHlwZS5NSVNTSU5HX0RBVEEsIFNldHRpbmdJZHMuU2VyaWVzSWQpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICBsZXQgc2VyaWVzTmFtZURhdGEgPSBzZXR0aW5ncy5nZXRWYWx1ZShTZXR0aW5nSWRzLlNlcmllc05hbWUpO1xyXG4gICAgICAgICAgICBpZihzZXJpZXNOYW1lRGF0YSAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICBzZXJpZXNEYXRhW0RhdGFJZHMuU2VyaWVzTmFtZV0gPSBuZXcgUGFja2FnZShuZXcgTWV0YShEYXRhVHlwZS5TVFJJTkcpLCBzZXJpZXNOYW1lRGF0YSk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB0aHJvdyBNY2VDb252ZXJzaW9uRXJyb3IuY3JlYXRlRXJyb3JCeVR5cGUoTWNlQ29udmVyc2lvbkVycm9yVHlwZS5NSVNTSU5HX0RBVEEsIFNldHRpbmdJZHMuU2VyaWVzTmFtZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgXHJcblxyXG4gICAgICAgICAgICBsZXQgc2VyaWVzQ29sb3JEYXRhID0gc2V0dGluZ3MuZ2V0VmFsdWUoU2V0dGluZ0lkcy5TZXJpZXNDb2xvcik7XHJcbiAgICAgICAgICAgIGlmKHNlcmllc0NvbG9yRGF0YSAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICBzZXJpZXNEYXRhW0RhdGFJZHMuU2VyaWVzQ29sb3JdID0gbmV3IFBhY2thZ2UobmV3IE1ldGEoRGF0YVR5cGUuU1RSSU5HKSwgc2VyaWVzQ29sb3JEYXRhKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHRocm93IE1jZUNvbnZlcnNpb25FcnJvci5jcmVhdGVFcnJvckJ5VHlwZShNY2VDb252ZXJzaW9uRXJyb3JUeXBlLk1JU1NJTkdfREFUQSwgU2V0dGluZ0lkcy5TZXJpZXNDb2xvcik7XHJcblxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICBcclxuXHJcbiAgICAgICAgICAgIGxldCBzZXJpZXNTaWduYWxEYXRhRGF0YSA9IHNldHRpbmdzLmdldFZhbHVlKFNldHRpbmdJZHMuU2VyaWVzU2lnbmFsRGF0YSk7XHJcbiAgICAgICAgICAgIGxldCBzZXJpZXNDYWxjdWxhdGlvbkRhdGFJbmZvRGF0YSA9IHNldHRpbmdzLmdldFZhbHVlKFNldHRpbmdJZHMuU2VyaWVzQ2FsY3VsYXRpb25EYXRhKTtcclxuXHJcbiAgICAgICAgICAgIGlmKHNlcmllc1NpZ25hbERhdGFEYXRhICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgIGxldCBzaWduYWxEYXRhUGFja2FnZVN0cnVjdHVyZSA9IEV4cG9ydENvbnRhaW5lci5jcmVhdGVQYWNrYWdlcyhzZXJpZXNTaWduYWxEYXRhRGF0YSk7XHJcbiAgICAgICAgICAgICAgICBpZihzaWduYWxEYXRhUGFja2FnZVN0cnVjdHVyZS5wYWNrYWdlcy5sZW5ndGggPiAwICYmICFOdW1iZXIuaXNOYU4oc2lnbmFsRGF0YVBhY2thZ2VTdHJ1Y3R1cmUudG9wTGV2ZWxJRCkpIHtcclxuICAgICAgICAgICAgICAgICAgICBzZXJpZXNEYXRhW0RhdGFJZHMuU2VyaWVzU2lnbmFsRGF0YV0gPSBuZXcgUGFja2FnZShuZXcgTWV0YShEYXRhVHlwZS5MSU5LKSwgc2lnbmFsRGF0YVBhY2thZ2VTdHJ1Y3R1cmUudG9wTGV2ZWxJRCk7XHJcbiAgICAgICAgICAgICAgICAgICAgcGFja2FnZVN0cnVjdHVyZS5wYWNrYWdlcy5wdXNoKC4uLnNpZ25hbERhdGFQYWNrYWdlU3RydWN0dXJlLnBhY2thZ2VzKTtcclxuICAgICAgICAgICAgICAgIH1lbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBNY2VDb252ZXJzaW9uRXJyb3IuY3JlYXRlRXJyb3JCeVR5cGUoTWNlQ29udmVyc2lvbkVycm9yVHlwZS5NSVNTSU5HX0RBVEEsIGAke1NldHRpbmdJZHMuU2VyaWVzU2lnbmFsRGF0YX0vJHtzZXJpZXNDYWxjdWxhdGlvbkRhdGFJbmZvRGF0YX1gKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSBlbHNlIGlmKHNlcmllc0NhbGN1bGF0aW9uRGF0YUluZm9EYXRhICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgIGxldCBjYWxjdWxhdGlvbkRhdGFJbmZvUGFja2FnZVN0cnVjdHVyZSA9IEV4cG9ydENvbnRhaW5lci5jcmVhdGVQYWNrYWdlcyhzZXJpZXNDYWxjdWxhdGlvbkRhdGFJbmZvRGF0YSk7XHJcbiAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgIGlmKGNhbGN1bGF0aW9uRGF0YUluZm9QYWNrYWdlU3RydWN0dXJlLnBhY2thZ2VzLmxlbmd0aCA+IDAgJiYgIU51bWJlci5pc05hTihjYWxjdWxhdGlvbkRhdGFJbmZvUGFja2FnZVN0cnVjdHVyZS50b3BMZXZlbElEKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHNlcmllc0RhdGFbRGF0YUlkcy5TZXJpZXNDYWxjdWxhdGlvbkRhdGFdID0gbmV3IFBhY2thZ2UobmV3IE1ldGEoRGF0YVR5cGUuTElOSyksIGNhbGN1bGF0aW9uRGF0YUluZm9QYWNrYWdlU3RydWN0dXJlLnRvcExldmVsSUQpO1xyXG4gICAgICAgICAgICAgICAgICAgIHBhY2thZ2VTdHJ1Y3R1cmUucGFja2FnZXMucHVzaCguLi5jYWxjdWxhdGlvbkRhdGFJbmZvUGFja2FnZVN0cnVjdHVyZS5wYWNrYWdlcyk7XHJcbiAgICAgICAgICAgICAgICB9ZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgTWNlQ29udmVyc2lvbkVycm9yLmNyZWF0ZUVycm9yQnlUeXBlKE1jZUNvbnZlcnNpb25FcnJvclR5cGUuTUlTU0lOR19EQVRBLCBgJHtTZXR0aW5nSWRzLlNlcmllc1NpZ25hbERhdGF9LyR7c2VyaWVzQ2FsY3VsYXRpb25EYXRhSW5mb0RhdGF9YCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB0aHJvdyBNY2VDb252ZXJzaW9uRXJyb3IuY3JlYXRlRXJyb3JCeVR5cGUoTWNlQ29udmVyc2lvbkVycm9yVHlwZS5NSVNTSU5HX0RBVEEsIGAke1NldHRpbmdJZHMuU2VyaWVzU2lnbmFsRGF0YX0vJHtzZXJpZXNDYWxjdWxhdGlvbkRhdGFJbmZvRGF0YX1gKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgbGV0IHNlcmllc1BhY2thZ2UgPSBuZXcgUGFja2FnZShzZXJpZXNNZXRhLCBzZXJpZXNEYXRhKTtcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIHBhY2thZ2VTdHJ1Y3R1cmUucGFja2FnZXMucHVzaChzZXJpZXNQYWNrYWdlKTtcclxuICAgICAgICAgICAgcGFja2FnZVN0cnVjdHVyZS50b3BMZXZlbElEID0gaWQ7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgdGhyb3cgTWNlQ29udmVyc2lvbkVycm9yLmNyZWF0ZUVycm9yQnlUeXBlKE1jZUNvbnZlcnNpb25FcnJvclR5cGUuVU5TVVBQT1JURURfVkVSU0lPTiwgdGhpcy5zZXR0aW5nc1R5cGUpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIHBhY2thZ2VTdHJ1Y3R1cmU7XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCB7IEJhc2VTZXJpZXNQYWNrYWdlQWRhcHRlciB9Il19