define(["require", "exports", "../../common/packageConversion/enum/objectTypeEnum", "../../common/persistence/settings", "../../common/packageConversion/enum/dataTypeEnum", "../../common/packageConversion/enum/additionalMetaKeys", "../../common/packageConversion/mceConversionError", "./settingIds", "../../common/packageConversion/enum/arrayTypeEnum", "../../common/packageConversion/package", "../../common/packageConversion/meta"], function (require, exports, objectTypeEnum_1, settings_1, dataTypeEnum_1, additionalMetaKeys_1, mceConversionError_1, settingIds_1, arrayTypeEnum_1, package_1, meta_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var DataIds;
    (function (DataIds) {
        DataIds["ScaleId"] = "id";
        DataIds["ScaleName"] = "name";
        DataIds["ScaleMinXValue"] = "minXValue";
        DataIds["ScaleMinYValue"] = "minYValue";
        DataIds["ScaleMaxXValue"] = "maxXValue";
        DataIds["ScaleMaxYValue"] = "maxYValue";
        DataIds["ScaleSeriesIds"] = "seriesIds";
        DataIds["ScaleExpandState"] = "expandState";
    })(DataIds || (DataIds = {}));
    var ScalePackageAdapter = /** @class */ (function () {
        function ScalePackageAdapter() {
            //newest version of package format
            this.currentPackageVersion = 1;
            this.settingsType = "Scale";
            this.objectType = objectTypeEnum_1.ObjectType.SCALE;
        }
        ScalePackageAdapter.prototype.packageToSetting = function (packageData, container) {
            var _a, _b, _c;
            var setting = new settings_1.Settings(this.settingsType);
            if (((_a = packageData === null || packageData === void 0 ? void 0 : packageData.meta) === null || _a === void 0 ? void 0 : _a.dataType) === dataTypeEnum_1.DataType.OBJECT && ((_b = packageData === null || packageData === void 0 ? void 0 : packageData.meta) === null || _b === void 0 ? void 0 : _b[additionalMetaKeys_1.AdditionalMetaKeys.OBJECTTYPE]) === this.objectType) {
                switch ((_c = packageData === null || packageData === void 0 ? void 0 : packageData.meta) === null || _c === void 0 ? void 0 : _c[additionalMetaKeys_1.AdditionalMetaKeys.VERSION]) {
                    case 1:
                        setting = this.packageV1ToSetting(packageData, container);
                        break;
                    default:
                        throw mceConversionError_1.MceConversionError.createErrorByType(mceConversionError_1.MceConversionErrorType.UNSUPPORTED_VERSION, this.objectType);
                }
            }
            else {
                throw mceConversionError_1.MceConversionError.createErrorByType(mceConversionError_1.MceConversionErrorType.UNSUPPORTED_TYPE, this.objectType);
            }
            return setting;
        };
        ScalePackageAdapter.prototype.packageV1ToSetting = function (packageData, container) {
            var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x, _y, _z, _0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18;
            var setting = new settings_1.Settings(this.settingsType);
            if (((_c = (_b = (_a = packageData === null || packageData === void 0 ? void 0 : packageData.data) === null || _a === void 0 ? void 0 : _a[DataIds.ScaleId]) === null || _b === void 0 ? void 0 : _b.meta) === null || _c === void 0 ? void 0 : _c.dataType) === dataTypeEnum_1.DataType.STRING) {
                setting.setValue(settingIds_1.SettingIds.ScaleId, (_e = (_d = packageData === null || packageData === void 0 ? void 0 : packageData.data) === null || _d === void 0 ? void 0 : _d[DataIds.ScaleId]) === null || _e === void 0 ? void 0 : _e.data);
            }
            else {
                throw mceConversionError_1.MceConversionError.createErrorByType(mceConversionError_1.MceConversionErrorType.MISSING_DATA, DataIds.ScaleId);
            }
            if (((_h = (_g = (_f = packageData === null || packageData === void 0 ? void 0 : packageData.data) === null || _f === void 0 ? void 0 : _f[DataIds.ScaleName]) === null || _g === void 0 ? void 0 : _g.meta) === null || _h === void 0 ? void 0 : _h.dataType) === dataTypeEnum_1.DataType.STRING) {
                setting.setValue(settingIds_1.SettingIds.ScaleName, (_k = (_j = packageData === null || packageData === void 0 ? void 0 : packageData.data) === null || _j === void 0 ? void 0 : _j[DataIds.ScaleName]) === null || _k === void 0 ? void 0 : _k.data);
            }
            else {
                throw mceConversionError_1.MceConversionError.createErrorByType(mceConversionError_1.MceConversionErrorType.MISSING_DATA, DataIds.ScaleName);
            }
            if (((_o = (_m = (_l = packageData === null || packageData === void 0 ? void 0 : packageData.data) === null || _l === void 0 ? void 0 : _l[DataIds.ScaleExpandState]) === null || _m === void 0 ? void 0 : _m.meta) === null || _o === void 0 ? void 0 : _o.dataType) === dataTypeEnum_1.DataType.BOOLEAN) {
                setting.setValue(settingIds_1.SettingIds.ScaleExpandState, (_q = (_p = packageData === null || packageData === void 0 ? void 0 : packageData.data) === null || _p === void 0 ? void 0 : _p[DataIds.ScaleExpandState]) === null || _q === void 0 ? void 0 : _q.data);
            }
            else {
                throw mceConversionError_1.MceConversionError.createErrorByType(mceConversionError_1.MceConversionErrorType.MISSING_DATA, DataIds.ScaleExpandState);
            }
            if (((_t = (_s = (_r = packageData === null || packageData === void 0 ? void 0 : packageData.data) === null || _r === void 0 ? void 0 : _r[DataIds.ScaleMinXValue]) === null || _s === void 0 ? void 0 : _s.meta) === null || _t === void 0 ? void 0 : _t.dataType) === dataTypeEnum_1.DataType.NUMBER) {
                setting.setValue(settingIds_1.SettingIds.ScaleMinXValue, (_v = (_u = packageData === null || packageData === void 0 ? void 0 : packageData.data) === null || _u === void 0 ? void 0 : _u[DataIds.ScaleMinXValue]) === null || _v === void 0 ? void 0 : _v.data);
            }
            else {
                throw mceConversionError_1.MceConversionError.createErrorByType(mceConversionError_1.MceConversionErrorType.MISSING_DATA, DataIds.ScaleMinXValue);
            }
            if (((_y = (_x = (_w = packageData === null || packageData === void 0 ? void 0 : packageData.data) === null || _w === void 0 ? void 0 : _w[DataIds.ScaleMaxXValue]) === null || _x === void 0 ? void 0 : _x.meta) === null || _y === void 0 ? void 0 : _y.dataType) === dataTypeEnum_1.DataType.NUMBER) {
                setting.setValue(settingIds_1.SettingIds.ScaleMaxXValue, (_0 = (_z = packageData === null || packageData === void 0 ? void 0 : packageData.data) === null || _z === void 0 ? void 0 : _z[DataIds.ScaleMaxXValue]) === null || _0 === void 0 ? void 0 : _0.data);
            }
            else {
                throw mceConversionError_1.MceConversionError.createErrorByType(mceConversionError_1.MceConversionErrorType.MISSING_DATA, DataIds.ScaleMaxXValue);
            }
            if (((_3 = (_2 = (_1 = packageData === null || packageData === void 0 ? void 0 : packageData.data) === null || _1 === void 0 ? void 0 : _1[DataIds.ScaleMinYValue]) === null || _2 === void 0 ? void 0 : _2.meta) === null || _3 === void 0 ? void 0 : _3.dataType) === dataTypeEnum_1.DataType.NUMBER) {
                setting.setValue(settingIds_1.SettingIds.ScaleMinYValue, (_5 = (_4 = packageData === null || packageData === void 0 ? void 0 : packageData.data) === null || _4 === void 0 ? void 0 : _4[DataIds.ScaleMinYValue]) === null || _5 === void 0 ? void 0 : _5.data);
            }
            else {
                throw mceConversionError_1.MceConversionError.createErrorByType(mceConversionError_1.MceConversionErrorType.MISSING_DATA, DataIds.ScaleMinYValue);
            }
            if (((_8 = (_7 = (_6 = packageData === null || packageData === void 0 ? void 0 : packageData.data) === null || _6 === void 0 ? void 0 : _6[DataIds.ScaleMaxYValue]) === null || _7 === void 0 ? void 0 : _7.meta) === null || _8 === void 0 ? void 0 : _8.dataType) === dataTypeEnum_1.DataType.NUMBER) {
                setting.setValue(settingIds_1.SettingIds.ScaleMaxYValue, (_10 = (_9 = packageData === null || packageData === void 0 ? void 0 : packageData.data) === null || _9 === void 0 ? void 0 : _9[DataIds.ScaleMaxYValue]) === null || _10 === void 0 ? void 0 : _10.data);
            }
            else {
                throw mceConversionError_1.MceConversionError.createErrorByType(mceConversionError_1.MceConversionErrorType.MISSING_DATA, DataIds.ScaleMaxYValue);
            }
            if (((_13 = (_12 = (_11 = packageData === null || packageData === void 0 ? void 0 : packageData.data) === null || _11 === void 0 ? void 0 : _11[DataIds.ScaleSeriesIds]) === null || _12 === void 0 ? void 0 : _12.meta) === null || _13 === void 0 ? void 0 : _13.dataType) === dataTypeEnum_1.DataType.ARRAY && ((_16 = (_15 = (_14 = packageData === null || packageData === void 0 ? void 0 : packageData.data) === null || _14 === void 0 ? void 0 : _14[DataIds.ScaleSeriesIds]) === null || _15 === void 0 ? void 0 : _15.meta) === null || _16 === void 0 ? void 0 : _16[additionalMetaKeys_1.AdditionalMetaKeys.ARRAYTYPE]) === arrayTypeEnum_1.ArrayType.STRING) {
                setting.setValue(settingIds_1.SettingIds.ScaleSeriesIds, (_18 = (_17 = packageData === null || packageData === void 0 ? void 0 : packageData.data) === null || _17 === void 0 ? void 0 : _17[DataIds.ScaleSeriesIds]) === null || _18 === void 0 ? void 0 : _18.data);
            }
            else {
                throw mceConversionError_1.MceConversionError.createErrorByType(mceConversionError_1.MceConversionErrorType.MISSING_DATA, DataIds.ScaleSeriesIds);
            }
            return setting;
        };
        ScalePackageAdapter.prototype.settingToPackage = function (settingsData) {
            var settings = settings_1.Settings.create(settingsData);
            var scaleData = {};
            var packageStructure = {
                packages: new Array(),
                topLevelID: NaN
            };
            if (settings.type === this.settingsType) {
                var id = meta_1.Meta.createID();
                var additionalMetaKeys = [{ key: additionalMetaKeys_1.AdditionalMetaKeys.OBJECTTYPE, value: this.objectType }, { key: additionalMetaKeys_1.AdditionalMetaKeys.ID, value: id }, { key: additionalMetaKeys_1.AdditionalMetaKeys.VERSION, value: this.currentPackageVersion }];
                var scaleMeta = new meta_1.Meta(dataTypeEnum_1.DataType.OBJECT, additionalMetaKeys);
                var scaleIdData = settings.getValue(settingIds_1.SettingIds.ScaleId);
                if (scaleIdData !== undefined) {
                    scaleData[DataIds.ScaleId] = new package_1.Package(new meta_1.Meta(dataTypeEnum_1.DataType.STRING), scaleIdData);
                }
                else {
                    throw mceConversionError_1.MceConversionError.createErrorByType(mceConversionError_1.MceConversionErrorType.MISSING_DATA, settingIds_1.SettingIds.ScaleId);
                }
                var scaleNameData = settings.getValue(settingIds_1.SettingIds.ScaleName);
                if (scaleNameData !== undefined) {
                    scaleData[DataIds.ScaleName] = new package_1.Package(new meta_1.Meta(dataTypeEnum_1.DataType.STRING), scaleNameData);
                }
                else {
                    throw mceConversionError_1.MceConversionError.createErrorByType(mceConversionError_1.MceConversionErrorType.MISSING_DATA, settingIds_1.SettingIds.ScaleName);
                }
                var scaleExpandStateData = settings.getValue(settingIds_1.SettingIds.ScaleExpandState);
                if (scaleExpandStateData !== undefined) {
                    scaleData[DataIds.ScaleExpandState] = new package_1.Package(new meta_1.Meta(dataTypeEnum_1.DataType.BOOLEAN), scaleExpandStateData);
                }
                else {
                    throw mceConversionError_1.MceConversionError.createErrorByType(mceConversionError_1.MceConversionErrorType.MISSING_DATA, settingIds_1.SettingIds.ScaleExpandState);
                }
                var scaleMinXValueData = settings.getValue(settingIds_1.SettingIds.ScaleMinXValue);
                if (scaleMinXValueData !== undefined) {
                    scaleData[DataIds.ScaleMinXValue] = new package_1.Package(new meta_1.Meta(dataTypeEnum_1.DataType.NUMBER), scaleMinXValueData);
                }
                else {
                    throw mceConversionError_1.MceConversionError.createErrorByType(mceConversionError_1.MceConversionErrorType.MISSING_DATA, settingIds_1.SettingIds.ScaleMinXValue);
                }
                var scaleMaxXValueData = settings.getValue(settingIds_1.SettingIds.ScaleMaxXValue);
                if (scaleMaxXValueData !== undefined) {
                    scaleData[DataIds.ScaleMaxXValue] = new package_1.Package(new meta_1.Meta(dataTypeEnum_1.DataType.NUMBER), scaleMaxXValueData);
                }
                else {
                    throw mceConversionError_1.MceConversionError.createErrorByType(mceConversionError_1.MceConversionErrorType.MISSING_DATA, settingIds_1.SettingIds.ScaleMaxXValue);
                }
                var scaleMinYValueData = settings.getValue(settingIds_1.SettingIds.ScaleMinYValue);
                if (scaleMinYValueData !== undefined) {
                    scaleData[DataIds.ScaleMinYValue] = new package_1.Package(new meta_1.Meta(dataTypeEnum_1.DataType.NUMBER), scaleMinYValueData);
                }
                else {
                    throw mceConversionError_1.MceConversionError.createErrorByType(mceConversionError_1.MceConversionErrorType.MISSING_DATA, settingIds_1.SettingIds.ScaleMinYValue);
                }
                var scaleMaxYValueData = settings.getValue(settingIds_1.SettingIds.ScaleMaxYValue);
                if (scaleMaxYValueData !== undefined) {
                    scaleData[DataIds.ScaleMaxYValue] = new package_1.Package(new meta_1.Meta(dataTypeEnum_1.DataType.NUMBER), scaleMaxYValueData);
                }
                else {
                    throw mceConversionError_1.MceConversionError.createErrorByType(mceConversionError_1.MceConversionErrorType.MISSING_DATA, settingIds_1.SettingIds.ScaleMaxYValue);
                }
                var scaleSeriesIdsData = settings.getValue(settingIds_1.SettingIds.ScaleSeriesIds);
                if (scaleSeriesIdsData !== undefined) {
                    var scaleSerieIdsMeta = new meta_1.Meta(dataTypeEnum_1.DataType.ARRAY, [{ key: additionalMetaKeys_1.AdditionalMetaKeys.ARRAYTYPE, value: arrayTypeEnum_1.ArrayType.STRING }]);
                    scaleData[DataIds.ScaleSeriesIds] = new package_1.Package(scaleSerieIdsMeta, scaleSeriesIdsData);
                }
                else {
                    throw mceConversionError_1.MceConversionError.createErrorByType(mceConversionError_1.MceConversionErrorType.MISSING_DATA, settingIds_1.SettingIds.ScaleSeriesIds);
                }
                var categoryPackage = new package_1.Package(scaleMeta, scaleData);
                packageStructure.packages.push(categoryPackage);
                packageStructure.topLevelID = id;
            }
            else {
                throw mceConversionError_1.MceConversionError.createErrorByType(mceConversionError_1.MceConversionErrorType.UNSUPPORTED_VERSION, this.settingsType);
            }
            return packageStructure;
        };
        return ScalePackageAdapter;
    }());
    exports.ScalePackageAdapter = ScalePackageAdapter;
});
//# sourceMappingURL=data:application/json;base64,